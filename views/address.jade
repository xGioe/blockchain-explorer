extends layout/default_layout

block contents
  h1=title
    span.text-muted.ml-2.sub #{address}

  div#app(v-cloak)
    table.table.table-striped.table-bordered._table-sm.w-100
      thead
        tr
          th.w-25 Balance
          td
            i.fas.fa-lg.fa-spinner.fa-pulse(v-if="balance===null") 
            {{ balance }} {{ balance_eth }}
        tr
          th Balance(USD)
          td 
            i.fas.fa-lg.fa-spinner.fa-pulse(v-if="balance_usd===null") 
            {{ balance_usd }}
        tr
          th Storage
          td 
            i.fas.fa-lg.fa-spinner.fa-pulse(v-if="storage===null") 
            {{ storage }}
        tr
          th Transaction Count
          td 
            i.fas.fa-lg.fa-spinner.fa-pulse(v-if="transactionCount===null") 
            {{ transactionCount }}
        tr(v-if="isContract")
          th Code
          td
            textarea(disabled, readonly, rows="25") {{ code }}
  
  script.

    var app = new Vue({
      el: '#app',
      data: { 
        address: '#{address}',
        balance: null,
        balance_eth: null,
        balance_usd: null,
        storage: null,
        code: null,
        transactionCount: null,
      },
      computed: {
        isContract: function() {
          return (this.code && this.code.length > 3);
        }
      },
      created: function() {
        getAddressInfo.bind(this)();
      }
    });

    function getBalance(address) {
      return new Promise((res, rej) => {
        web3.eth.getBalance(address, (error, result) => {
          if(error) rej(error);
          else res(result.toString(10));
        });
      });
    }

    function getStorageAt(address) {
      return new Promise((res, rej) => {
        web3.eth.getStorageAt(address, (error, result) => {
          if(error) rej(error);
          else res(result);
        });
      });
    }

    function getCode(address) {
      return new Promise((res, rej) => {
        web3.eth.getCode(address, (error, result) => {
          if(error) rej(error);
          else res(result);
        });
      });
    }

    function getTransactionCount(address) {
      return new Promise((res, rej) => {
        web3.eth.getTransactionCount(address, (error, result) => {
          if(error) rej(error);
          else res(result);
        });
      });
    }


    function getETHUSD(balance) {
      return new Promise((res, rej) => {
        $.getJSON("https://api.coinmarketcap.com/v1/ticker/ethereum/", function(json) {
          var price = Number(json[0].price_usd);
          var ethusd = price.toFixed(2);
          var balanceusd = "$ " + (ethusd * balance);
          res(balanceusd);
        });
      });
    }

    async function getAddressInfo(address) {
      var self = app || this;
      address = address || self.address;

      self.balance = await getBalance(address);
      self.balance_eth = '(' + web3.fromWei(app.balance, 'ether').toString(10) + ' ETH)';

      self.storage = await getStorageAt(address);
      self.code = await getCode(address);
      //- if( self.code.length > 3) self.isContract
      //- console.log('code: ', JSON.stringify(self.code, '', 2));

      self.transactionCount = await getTransactionCount(address);

      self.balance_usd = await getETHUSD(web3.fromWei(app.balance, 'ether'));
    }

    
    
    

    
    
